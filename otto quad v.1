#include <Servo.h>

// Definição dos pinos dos servos
const int servo1Pin = 2;  // Pata dianteira esquerda
const int servo2Pin = 3;  // Articulação dianteira esquerda
const int servo3Pin = 4;  // Pata traseira esquerda
const int servo4Pin = 5;  // Articulação traseira esquerda
const int servo5Pin = 6;  // Pata dianteira direita
const int servo6Pin = 7;  // Articulação dianteira direita
const int servo7Pin = 8;  // Pata traseira direita
const int servo8Pin = 9;  // Articulação traseira direita

// Criação dos objetos Servo
Servo servo1;
Servo servo2;
Servo servo3;
Servo servo4;
Servo servo5;
Servo servo6;
Servo servo7;
Servo servo8;

void setup() {
  // Anexar os servos aos pinos
  servo1.attach(servo1Pin);
  servo2.attach(servo2Pin);
  servo3.attach(servo3Pin);
  servo4.attach(servo4Pin);
  servo5.attach(servo5Pin);
  servo6.attach(servo6Pin);
  servo7.attach(servo7Pin);
  servo8.attach(servo8Pin);

  // Definir posições iniciais
  setInitialPositions();

  // Esperar que os servos se posicionem
  delay(1000);
}

void loop() {
  // - - - - -- - - - -    Movimento para volta para a esquerda


  // Passo 1: Levantar e mover a pata dianteira esquerda para frente e a direita para trás


 // moveLegAndKnee(servo1, 145, servo2, 60); // Levantar e mover pata dianteira esquerda para frente
 // moveLegDown(servo1, 30); // Abaixar pata dianteira esquerda

  //moveLegAndKnee(servo5, 30, servo6, 120); // Levantar e mover pata dianteira direita para trás
  //moveLegDown(servo5, 120); // Abaixar pata dianteira direita

  // Passo 2: Impulsionar com as patas traseiras
  //moveLegAndKnee(servo3, 50, servo4, 60);  // Levantar e mover pata traseira esquerda para frente
  //moveLegDown(servo3, 90); // Abaixar pata traseira esquerda

  //moveLegAndKnee(servo7, 20, servo8, 60);  // Levantar e mover pata traseira direita para frente
  //moveLegDown(servo7, 90); // Abaixar pata traseira direita

  // Passo 3: Retornar as articulações à posição inicial
  //moveKnee(servo2, 90); // Articulação dianteira esquerda para posição inicial
  //moveKnee(servo6, 90); // Articulação dianteira direita para posição inicial
  //moveKnee(servo4, 90); // Articulação traseira esquerda para posição inicial
  // moveKnee(servo8, 90); // Articulação traseira direita para posição inicial


  ///------------------ movimento para a frente

  moveLegAndKnee(servo1, 145, servo2, 60); // Levantar e mover pata dianteira esquerda para frente
  moveLegDown(servo1, 90); // Abaixar pata dianteira esquerda

  moveLegAndKnee(servo5, 70, servo6, 140); // Levantar e mover pata dianteira direita para trás
  moveLegDown(servo5, 120); // Abaixar pata dianteira direita

  // Passo 2: Impulsionar com as patas traseiras
  moveLegAndKnee(servo3, 50, servo4, 60);  // Levantar e mover pata traseira esquerda para frente
  moveLegDown(servo3, 90); // Abaixar pata traseira esquerda

  moveLegAndKnee(servo7, 20, servo8, 60);  // Levantar e mover pata traseira direita para frente
  moveLegDown(servo7, 90); // Abaixar pata traseira direita

  // Passo 3: Retornar as articulações à posição inicial
  moveKnee(servo2, 90); // Articulação dianteira esquerda para posição inicial
  moveKnee(servo6, 90); // Articulação dianteira direita para posição inicial
  moveKnee(servo4, 90); // Articulação traseira esquerda para posição inicial
  moveKnee(servo8, 90); // Articulação traseira direita para posição inicial


  

  // Pequena pausa antes do próximo ciclo
  delay(100);
}

// Função para mover servo de forma suave (patas)
void moveLeg(Servo &servo, int pos) {
  int atual = servo.read();
  if (atual < pos) {
    for (int i = atual; i <= pos; i++) {
      servo.write(i);
      delay(1);
    }
  } else {
    for (int i = atual; i >= pos; i--) {
      servo.write(i);
      delay(5);
    }
  }
}

// Função para mover servo de forma suave (articulações)
void moveKnee(Servo &servo, int pos) {
  int atual = servo.read();
  if (atual < pos) {
    for (int i = atual; i <= pos; i++) {
      servo.write(i);
      delay(1);
    }
  } else {
    for (int i = atual; i >= pos; i--) {
      servo.write(i);
      delay(5);
    }
  }
}

// Função para mover duas articulações de forma suave
void moveKnees(Servo &servoA, int posA, Servo &servoB, int posB) {
  int atualA = servoA.read();
  int atualB = servoB.read();
  int stepA = (atualA < posA) ? 1 : -1;
  int stepB = (atualB < posB) ? 1 : -1;

  while (atualA != posA || atualB != posB) {
    if (atualA != posA) {
      atualA += stepA;
      servoA.write(atualA);
    }
    if (atualB != posB) {
      atualB += stepB;
      servoB.write(atualB);
    }
    delay(10);
  }
}

// Função para mover uma perna e articulação de forma suave
void moveLegAndKnee(Servo &legServo, int legPos, Servo &kneeServo, int kneePos) {
  moveLeg(legServo, legPos); // Levantar pata
  delay(10);
  moveKnee(kneeServo, kneePos); // Mover articulação
  delay(10);
}

// Função para abaixar uma perna de forma suave
void moveLegDown(Servo &legServo, int legPos) {
  moveLeg(legServo, legPos); // Abaixar pata
  delay(10);
}

// Função para definir posições iniciais
void setInitialPositions() {
  servo1.write(90); // Pata dianteira esquerda
  servo2.write(90); // Articulação dianteira esquerda
  servo3.write(90); // Pata traseira esquerda
  servo4.write(90); // Articulação traseira esquerda
  servo5.write(90); // Pata dianteira direita
  servo6.write(90); // Articulação dianteira direita
  servo7.write(90); // Pata traseira direita
  servo8.write(90); // Articulação traseira direita
}
